import { EventSubscriber } from '@a-type/utils';
import { Archetype } from './Archetype.js';
import { logger } from './logger.js';
export class ArchetypeManager extends EventSubscriber {
    constructor(game) {
        super();
        this.game = game;
        // maps entity ids to archetypes
        this.entityLookup = new Array();
        // maps archetype id bitstrings to Archetype instances
        this.archetypes = {};
        // FIXME: why +1 here? Component ids are not starting at 0... this
        // should be more elegant
        this.emptyId = new Array(this.game.componentManager.componentHandles.length + 1)
            .fill('0')
            .join('');
        this.archetypes[this.emptyId] = new Archetype(this.emptyId);
    }
    createEntity(entityId) {
        logger.debug(`Creating entity ${entityId}`);
        this.entityLookup[entityId] = this.emptyId;
        // allocate an Entity
        const entity = this.game.entityPool.acquire();
        entity.__set(entityId, []);
        this.getOrCreate(this.emptyId).addEntity(entity);
        this.emit('entityCreated', entityId);
    }
    addComponent(entityId, instance) {
        logger.debug(`Adding ${Object.getPrototypeOf(instance).constructor.name} to entity ${entityId}`);
        const oldArchetypeId = this.entityLookup[entityId];
        if (oldArchetypeId === undefined) {
            throw new Error(`Tried to add component ${instance.$.type.name} to ${entityId}, but it was not found in the archetype registry`);
        }
        const oldArchetype = this.getOrCreate(oldArchetypeId);
        // remove data from old archetype
        const entity = oldArchetype.removeEntity(entityId);
        entity.__addComponent(instance);
        const newArchetypeId = (this.entityLookup[entityId] = this.flipBit(oldArchetypeId, instance.$.type.id));
        const archetype = this.getOrCreate(newArchetypeId);
        // copy entity from old to new
        archetype.addEntity(entity);
        logger.debug(`Entity ${entityId} moved to archetype ${newArchetypeId}`);
        this.emit('entityComponentAdded', entityId, instance);
    }
    removeComponent(entityId, componentType) {
        logger.debug(`Removing ${this.game.componentManager.getTypeName(componentType)} from entity ${entityId}`);
        const oldArchetypeId = this.entityLookup[entityId];
        if (oldArchetypeId === undefined) {
            logger.warn(`Tried to remove component ${this.game.componentManager.getTypeName(componentType)} from ${entityId}, but it was not found in the archetype registry`);
            return;
        }
        const oldArchetype = this.getOrCreate(oldArchetypeId);
        const entity = oldArchetype.removeEntity(entityId);
        const removed = entity.__removeComponent(componentType);
        const newArchetypeId = (this.entityLookup[entityId] = this.flipBit(oldArchetypeId, componentType));
        const archetype = this.getOrCreate(newArchetypeId);
        archetype.addEntity(entity);
        logger.debug(`Entity ${entityId} moved to archetype ${newArchetypeId}`);
        this.emit('entityComponentRemoved', entityId, componentType);
        return removed;
    }
    destroyEntity(entityId) {
        logger.debug(`Destroying entity ${entityId}`);
        const archetypeId = this.entityLookup[entityId];
        if (archetypeId === undefined) {
            throw new Error(`Tried to destroy ${entityId}, but it was not found in archetype registry`);
        }
        this.entityLookup[entityId] = undefined;
        const archetype = this.archetypes[archetypeId];
        const entity = archetype.removeEntity(entityId);
        this.emit('entityDestroyed', entityId);
        return entity;
    }
    getEntity(entityId) {
        const archetypeId = this.entityLookup[entityId];
        if (archetypeId === undefined) {
            logger.debug(`Could not find Archetype for Entity ${entityId}`);
            return null;
        }
        const archetype = this.archetypes[archetypeId];
        return archetype.getEntity(entityId);
    }
    getOrCreate(id) {
        let archetype = this.archetypes[id];
        if (!archetype) {
            archetype = this.archetypes[id] = new Archetype(id);
            logger.debug(`New Archetype ${id} created`);
            this.emit('archetypeCreated', archetype);
        }
        return archetype;
    }
    flipBit(id, typeId) {
        return (id.substr(0, typeId) +
            (id[typeId] === '1' ? '0' : '1') +
            id.substr(typeId + 1));
    }
}
//# sourceMappingURL=ArchetypeManager.js.map